package main

import (
	"context"
	"log"
	"os"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
)

type Medicine struct {
	ID           uuid.UUID
	Barcode      string
	MedicineName string
	BrandName    string
	Category     string
	Dosage       int
	Content      string
	Quantity     int
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func main() {
	dsn := os.Getenv("POSTGRES_DSN")
	if dsn == "" {
		log.Fatal("POSTGRES_DSN env required")
	}
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	db, err := pgxpool.New(ctx, dsn)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	now := time.Now()
	medicines := []Medicine{
		{
			ID: uuid.New(), Barcode: "OBT001", MedicineName: "Paracetamol", BrandName: "Kimia Farma", Category: "Analgesik", Dosage: 500, Content: "Tablet 500mg", Quantity: 100, CreatedAt: now, UpdatedAt: now,
		},
		{
			ID: uuid.New(), Barcode: "OBT002", MedicineName: "Amoxicillin", BrandName: "Phapros", Category: "Antibiotik", Dosage: 500, Content: "Kapsul 500mg", Quantity: 50, CreatedAt: now, UpdatedAt: now,
		},
	}

	for _, m := range medicines {
		_, err := db.Exec(ctx, `INSERT INTO medicines (id, barcode, medicine_name, brand_name, category, dosage, content, quantity, created_at, updated_at) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) ON CONFLICT (barcode) DO NOTHING`, m.ID, m.Barcode, m.MedicineName, m.BrandName, m.Category, m.Dosage, m.Content, m.Quantity, m.CreatedAt, m.UpdatedAt)
		if err != nil {
			log.Fatal(err)
		}
	}
	log.Println("Seeder medicines selesai!")
}
