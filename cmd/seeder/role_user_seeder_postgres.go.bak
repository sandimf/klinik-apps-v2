package main

import (
	"context"
	"log"
	"os"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
	"golang.org/x/crypto/bcrypt"
)

type User struct {
	ID       uuid.UUID
	Email    string
	Password string
	Role     string
}

func hashPassword(password string) string {
	hash, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		log.Fatal(err)
	}
	return string(hash)
}

func main() {
	dsn := os.Getenv("POSTGRES_DSN")
	if dsn == "" {
		log.Fatal("POSTGRES_DSN env required")
	}
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	db, err := pgxpool.New(ctx, dsn)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	users := []User{
		{ID: uuid.New(), Email: "admin@klinik.com", Password: hashPassword("admin123"), Role: "admin"},
		{ID: uuid.New(), Email: "dokter@klinik.com", Password: hashPassword("dokter123"), Role: "dokter"},
		{ID: uuid.New(), Email: "paramedis@klinik.com", Password: hashPassword("paramedis123"), Role: "paramedis"},
		{ID: uuid.New(), Email: "kasir@klinik.com", Password: hashPassword("kasir123"), Role: "kasir"},
	}

	for _, u := range users {
		_, err := db.Exec(ctx, `INSERT INTO users (id, email, password, role) VALUES ($1, $2, $3, $4) ON CONFLICT (email) DO NOTHING`, u.ID, u.Email, u.Password, u.Role)
		if err != nil {
			log.Fatal(err)
		}
	}
	log.Println("Seeder users (role) selesai!")
}
